#!/bin/perl/bin/

BEGIN {
	use File::Basename;
	unshift(@INC, dirname($0)."/lib");
}

my $SCRIPT_DIR = dirname($0);

use strict;
use Getopt::Long;
use NGSPipeline::BSseq::Config;
use NGSPipeline::Utils;
use NGSPipeline;
use File::Basename;
use List::Vectorize;

if(! scalar(@ARGV)) {
	print <<USAGE;
########################################################################
#  Please confirm you have changed email in lib/NGSPipeline/Config.pm  #
########################################################################
  
  perl $0 --list file --dir dir --tool tool
  perl $0 --list file --dir dir --tool tool --no_bissnp
  perl $0 --list file --dir dir --tool tool --enforce
  perl $0 --list file --dir dir --tool tool --sample s1,s2
  
  --list      sample list, containing columns which are:
              1. fastq file for paired end 1, should be gzipped
              2. fastq file for paired end 2, should be gzipped
              3. sample name. If same sample names exist, they will be treated
                 as multiple lanes and will be merged in the pipeline.
              4. if from multiple lanes, whether they come from the same
                 libraries or not. (any type of strings to represent category
                 of libraries, optional)
  
  --dir       working dir, default is `analysis`. Under the working dir, there
              are list of directories named with sample names which are called
              job directory for each sample.
  
  --tool      tool for bisulfite sequencing data analysis, "bismark", "bsmap"
              or "methylctools", default is "bsmap". In this pipeline, Bismark
              uses Bowtie2, BSMAP uses SOAP and methyCtools uses BWA to do 
              alignment.
      
  --enforce   enforce to re-run pipeline from the beginning no matter they were
              successfully finished or not.
  
  --sample    subset of sample ids, should seperated by "," (no blank)
  
  --no_bissnp whether use BisSNP or methylation calling script of each tool to 
              do methylation calling. By default, the three pipelines use 
              BisSNP.
		
  --filesize  If size of some output files (e.g. bam files, methylation calling 
              files) are smaller than this value, then step is terminated. 
              Default is 1M (1024*1024). Set it to 0 or non-number
              strings to shut down file size checking.

NOTE:
  If your fastq files are stored in the standard directory structure which
are generated by data management group, use get_sample_list_from_std_dir.pl
first to generate sample list file.

  Since methylCtools uses BWA to do alignment, about 20% alignment jobs will be
sent to Convey.

FEATURES:
  - record running time for every command
  - catch errors both from exit code and output file size
  - re-run pipeline while skip the upsteam successful jobs
  - generate a detailed QC report
  
USAGE
	
	exit 0;
}

my $wd = "analysis";
my $tool = "bsmap";
my $list;
my $std_dir;
my $enforce = 0;
my $request_sampleid;
my $no_bissnp = 0;
my $do_test = 0;
my $filesize = 1024*1024;

GetOptions("list=s"    => \$list,
           "dir=s"     => \$wd,
           "tool=s"    => \$tool,
		   "enforce"   => \$enforce,
		   "sample=s"  => \$request_sampleid,
		   "no_bissnp" => \$no_bissnp,
		   "no-bissnp" => \$no_bissnp,
		   "filesize"  => \$filesize,
		   "test"      => \$do_test) or die;

		   
my %subset_samples = map { $_ => 1} split ",", $request_sampleid;
$filesize += 0;

open F, $list or die "Cannot open $list\n";
my $r1;
my $r2;
my $sample;
my $n_sample = 0;
while(my $line = <F>) {
	chomp $line;
	next if($line =~/^\s*$/);
	next if($line =~/^#/);
	
	my @tmp = split "\t", $line;
	$tmp[0] = to_abs_path($tmp[0]);
	$tmp[1] = to_abs_path($tmp[1]);

	if(basename($tmp[0]) eq basename($tmp[1])) {
		die "two fastq files have same names! check your file\n";
	}
	
	if(scalar(%subset_samples) and !$subset_samples{$tmp[2]}) {
		print "$tmp[2] is not in --sample, skip this sample.\n";
		next;
	}
	
	# if no record for this sample, initialize the array reference
	if(! defined($sample->{$tmp[2]})) {
		$sample->{$tmp[2]} = {};
		$sample->{$tmp[2]}->{r1} = [];
		$sample->{$tmp[2]}->{r2} = [];
		$sample->{$tmp[2]}->{library} = [];
	}
	
	push(@{$sample->{$tmp[2]}->{r1}}, $tmp[0]);
	push(@{$sample->{$tmp[2]}->{r2}}, $tmp[1]);
	
	# currently do not support multiple libraries for a same sample
	push(@{$sample->{$tmp[2]}->{library}}, defined($tmp[3]) ? $tmp[3] : undef);
	
	$n_sample ++;
}

foreach my $sample_id (keys %$sample) {
	if(all(test($sample->{$sample_id}->{library}, sub {! defined($_[0])}))) {
		$sample->{$sample_id}->{library} = rep(1, len($sample->{$sample_id}->{r1}));
	} elsif(sum(test($sample->{$sample_id}->{library}, sub {defined($_[0])})) != len($sample->{$sample_id}->{r1})) {
		die "Since you speficied 'library' column for '$sample_id', please specify them all.\n";
	}
}

$wd = to_abs_path($wd);
# seems set mode of the dir to 0755 not always successful
-e $wd ? 1: mkdir $wd, 0775 || die "cannto create dir: $wd with mode 0775\n";

$tool = lc($tool);

print "Working directory is $wd.\n";
print "Totally $n_sample samples with ". scalar(keys %$sample)." unique sample ids \n";
print "Using $tool.\n\n";

my $command = [];
foreach my $sample_id (sort keys %$sample) {
	
	print "=============================================\n";
	print "submit pipeline for $sample_id\n";
	
	my $r1 = $sample->{$sample_id}->{r1};
	my $r2 = $sample->{$sample_id}->{r2};
	my $library = $sample->{$sample_id}->{library};

	my $pipeline = NGSPipeline->new(dir => "$wd/$sample_id",
	                                enforce => $enforce,
									do_test => $do_test,
									filesize => $filesize);
	
	# prefix means absolute path without fast/fq or fast.gz/fq.gz
	my $prefix1 = basename($r1->[0]);
	$prefix1 =~s/\.(fq|fastq)(\.gz)?$//;
	$prefix1 = "$pipeline->{dir}/$prefix1";
	my $prefix2 = basename($r2->[0]);
	$prefix2 =~s/\.(fq|fastq)(\.gz)?$//;
	$prefix2 = "$pipeline->{dir}/$prefix2";
	
	if($tool eq "bismark") {

		require("$SCRIPT_DIR/pipeline/bismark.pl");
			          
	} elsif($tool eq "bsmap") {
		
		require("$SCRIPT_DIR/pipeline/bsmap.pl");
	
	}  elsif($tool eq "methylctools") {
	
		require("$SCRIPT_DIR/pipeline/methyctools.pl");
		
	} else {
		die "--tool can only be set to one of 'bismark', 'bsmap' and 'methylctools'.\n";
	}
}

